type Query {
    firstQuery : String
    secondQuery: String
    #    fullName(firstName : String, lastName : String) : String
    fullName(sampleRequest : SampleRequest) : String
    student(id : Long) : StudentResponce
}

# use input when it's argument type
# use type when it's returning type
type StudentResponce {
    id : Long
    firstName : String
    lastName : String
    email : String
    street : String
    city : String
    #    [ ] - user for List and Array
    learningSubjects(subjectNameFilter : SubjectNameFilter ) : [SubjectResponse]
    fullName : String
}

enum SubjectNameFilter {
    ALL,
    Java,
    MySQL,
    MongoDB
}

type SubjectResponse {
    id : Long
    subjectName : String
    marksObtained : Float # Double -> we should use Float instead of Double
}

input SampleRequest {
    firstName : String!               # ! exclamation mark, not allow as NULL
    lastName : String
    #    temp : Temp
}

#input Temp {
#
#}


